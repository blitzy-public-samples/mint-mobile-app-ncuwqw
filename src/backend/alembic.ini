# Human Tasks:
# 1. Verify PostgreSQL server is running and accessible
# 2. Ensure database user has sufficient privileges for migrations
# 3. Set up environment variables for database connection (DB_USER, DB_PASSWORD, DB_HOST, DB_PORT, DB_NAME)
# 4. Install required Python packages: alembic v1.7.0, sqlalchemy v1.4.0
# 5. Review migration scripts before applying to production database

# Requirement: Database Architecture (2.1 Data Layer)
# - Configure PostgreSQL for primary data storage with schema migration support
[alembic]
# Path to migration scripts
script_location = app/db/migrations

# Template used to generate migration files
# Format: YYYYMMDD_<rev>_<slug>
file_template = %%(year)d%%(month).2d%%(day).2d_%%(rev)s_%%(slug)s

# Set timezone to UTC for consistent timestamps
timezone = UTC

# SQLAlchemy database URL using environment variables
# Requirement: Database Schema Management (5.2.1 Schema Design)
# - Implement database schema version control and migration management
sqlalchemy.url = postgresql://%(DB_USER)s:%(DB_PASSWORD)s@%(DB_HOST)s:%(DB_PORT)s/%(DB_NAME)s

# Disable sourceless mode for better debugging
sourceless = false

# Don't include source code in migrations
revision_environment = false

# Location for version files
version_locations = %(here)s/versions

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console
qualname =
propagate = 0

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
propagate = 0

[logger_alembic]
level = INFO
handlers =
qualname = alembic
propagate = 0

[handler_console]
class = logging.StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# Post-migration hooks for code formatting
# Ensures consistent code style in migration files
[post_write_hooks]
hooks = black,isort

# Black code formatter configuration
black.type = console_scripts
black.entrypoint = black
black.options = -l 79

# isort import sorter configuration
isort.type = console_scripts
isort.entrypoint = isort
isort.options = --profile black