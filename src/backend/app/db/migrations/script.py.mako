# SQLAlchemy v1.4.0
# Alembic v1.7.0

"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

Requirements addressed:
- Database Schema Management (5.2.1 Schema Design): Generate standardized migration 
  scripts for database schema version control with proper versioning and dependencies
- Data Storage (2.1 Data Layer): Support PostgreSQL schema migrations and versioning 
  using Alembic with proper upgrade and downgrade paths
"""

# Human Tasks:
# 1. Review generated migration script before applying changes
# 2. Ensure database backup before running migrations
# 3. Test migrations in development environment first
# 4. Verify PostgreSQL permissions for schema modifications
# 5. Schedule migration deployment during low-traffic periods

from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector
from db.base import Base
${imports if imports else ""}

# revision identifiers, used by Alembic
revision = ${repr(up_revision)}
down_revision = ${repr(down_revision)}
branch_labels = ${repr(branch_labels)}
depends_on = ${repr(depends_on)}


def upgrade():
    """
    Implements forward migration changes to the database schema.
    
    This function should contain SQLAlchemy operations to:
    - Create, alter, or drop tables
    - Add, modify, or remove columns
    - Create or drop indexes and constraints
    - Perform data migrations if needed
    
    Uses Base.metadata for schema information and op.* commands for 
    database operations.
    """
    # Access metadata for schema information
    metadata = Base.metadata
    
    # Implementation will be generated by Alembic
    ${upgrades if upgrades else "pass"}


def downgrade():
    """
    Implements backward migration changes to revert database schema changes.
    
    This function should contain SQLAlchemy operations to:
    - Revert all changes made in the upgrade function
    - Restore previous schema state
    - Roll back data migrations if needed
    - Remove added constraints and indexes
    
    Operations should be executed in reverse order of upgrade.
    """
    # Access metadata for schema information
    metadata = Base.metadata
    
    # Implementation will be generated by Alembic
    ${downgrades if downgrades else "pass"}