# Human Tasks:
# 1. Verify Python 3.9+ is installed in the development and production environments
# 2. Configure AWS credentials for boto3 integration
# 3. Set up Sentry DSN in environment variables
# 4. Configure Redis connection settings
# 5. Set up PostgreSQL database credentials
# 6. Configure Plaid API credentials

# Requirement: Backend Development Framework (4.1 Programming Languages)
# Python 3.9+ specified as the base runtime
[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mint-replica-lite"
version = "0.1.0"
description = "Financial management system backend service"
authors = ["Mint Replica Lite Team"]
readme = "README.md"
python = ">=3.9,<4.0"

# Package configuration
packages = [
    { include = "app", from = "src/backend" }
]

# Project classification metadata
classifiers = [
    "Private :: Do Not Upload",
    "Programming Language :: Python :: 3.9",
    "Framework :: Flask",
    "Topic :: Office/Business :: Financial"
]

# Requirement: Backend Framework Stack (4.2.2 Backend Development)
# Core dependencies for Flask-based backend
[tool.poetry.dependencies]
python = ">=3.9,<4.0"
flask = ">=2.0.0"
flask-restful = ">=0.3.9"
flask-sqlalchemy = ">=2.5.1"
flask-migrate = ">=3.1.0"
flask-jwt-extended = ">=4.4.0"
flask-caching = ">=2.0.0"
flask-cors = ">=3.0.10"

# Database and caching dependencies
psycopg2-binary = ">=2.9.3"
redis = ">=4.2.0"

# Requirement: Security Standards Compliance (6.3.1)
# Security and authentication dependencies
cryptography = ">=37.0.0"
pyjwt = ">=2.4.0"

# Cloud and external service integration
boto3 = ">=1.24.0"
plaid-python = ">=9.1.0"

# Application server and task queue
gunicorn = ">=20.1.0"
celery = ">=5.2.0"

# Requirement: Development Services (4.4.3)
# Monitoring and error tracking
prometheus-client = ">=0.14.0"
sentry-sdk = ">=1.9.0"

# Development dependencies
[tool.poetry.dev-dependencies]
pytest = ">=7.1.0"
pytest-cov = ">=3.0.0"
black = "22.1.0"
isort = "5.10.1"
mypy = "0.931"
flake8 = "4.0.1"
bandit = ">=1.7.0"

# Code formatting configuration
[tool.black]
line-length = 100
target-version = ["py39"]
include = "src/backend/app"
extend-exclude = "migrations"

# Import sorting configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 100
skip = ["migrations"]

# Static type checking configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true
strict_optional = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
plugins = ["sqlalchemy.ext.mypy.plugin"]

# Code linting configuration
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [".git", "__pycache__", "build", "dist", "migrations"]
max-complexity = 10
per-file-ignores = { "__init__.py" = "F401" }

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --cov=app --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101"]
targets = ["src/backend/app"]