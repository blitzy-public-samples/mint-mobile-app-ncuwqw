# Human Tasks:
# 1. Configure Docker registry credentials in GitHub repository secrets
# 2. Set up Snyk API token in GitHub secrets for security scanning
# 3. Configure test database credentials in GitHub secrets
# 4. Set up AWS credentials for ECR access if using AWS container registry
# 5. Review and adjust resource limits for self-hosted runners if used

# REQ: CI/CD Pipeline (7.5 CI/CD Pipeline)
# GitHub Actions workflow for backend continuous integration
name: Backend CI

# REQ: CI/CD Pipeline - Automated triggers for main and develop branches
on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'src/backend/**'
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'src/backend/**'

# Environment variables used across jobs
env:
  PYTHON_VERSION: '3.9'
  POETRY_VERSION: '1.4.0'
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_IMAGE: 'mint-replica-lite/backend'

jobs:
  # REQ: Backend Development Framework (4.1 Programming Languages)
  # Run tests and code quality checks
  test:
    name: Run Tests and Code Quality Checks
    runs-on: ubuntu-latest

    # Configure required services for testing
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 - --version ${{ env.POETRY_VERSION }}
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        working-directory: src/backend
        run: poetry install --no-interaction --no-root

      - name: Run black code formatting check
        working-directory: src/backend
        run: poetry run black . --check

      - name: Run mypy type checking
        working-directory: src/backend
        run: poetry run mypy .

      - name: Run flake8 linting
        working-directory: src/backend
        run: poetry run flake8 .

      - name: Run pytest with coverage
        working-directory: src/backend
        run: poetry run pytest --cov=app --cov-report=xml

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: src/backend/coverage.xml

  # REQ: CI/CD Pipeline - Security scanning integration
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Snyk security scan
        uses: snyk/actions/python@v1
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

      - name: Run dependency audit
        working-directory: src/backend
        run: |
          pip install safety
          safety check

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: snyk-report.json
        if: always()

  # REQ: Containerization (2.5.2 Deployment Architecture)
  # Build and push Docker container
  build:
    name: Build and Push Docker Image
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image
        uses: docker/build-push-action@v3
        id: docker_build
        with:
          context: src/backend
          file: src/backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:buildcache,mode=max

      - name: Scan container image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

# Workflow outputs for use in dependent workflows
outputs:
  image_tag:
    description: "Built Docker image tag"
    value: ${{ steps.docker_build.outputs.image_tag }}